/* CrÃ©ation et insertion d'Ã©lÃ©ments dans le DOM */

/* RÃ©cupÃ©ration de la liste */
const liste = document.querySelector('#liste');

/* CrÃ©ation d'Ã©lÃ©ments Ã  partir de code HTML */
// liste.innerHTML = "<li>Item ajoutÃ© via <strong>innerHTML</strong></li>";
// liste.textContent = "<li>Item ajoutÃ© via <strong>textContent</strong></li>";
// liste.innerText = "<li>Item ajoutÃ© via <strong>innerText</strong></li>";
// liste.outerHTML = "<p><strong>outerHTML</strong> remplace l'Ã©lÃ©ment complet !</p>";

// Note : on peut aussi les utiliser en lecture
// console.log("innerHTML : ", liste.innerHTML);
// console.log("outerHTML : ", liste.outerHTML);

/* Utiliser les template strings avec innerHTML / outerHTML */
// const personne = { prenom: "JÃ©rÃ©my", classe: "formateur" };
// liste.innerHTML = `<li>Mon formateur s'appelle <span class="${personne.classe}">${personne.prenom}</span></li>`;

/* Pur crÃ©ation d'un noeud Ã  partir de zÃ©ro */
// const li = document.createElement("li");
// li.textContent = "Nouvel Ã©lÃ©ment li";
// liste.appendChild(li);
// const li2 = document.createElement("li");
// li2.textContent = "Nouvel Ã©lÃ©ment li2";
// liste.append(li, li2);

/* Clonage */
// const dernierItem = liste.querySelector('li:last-of-type');
// const nouvelItem = dernierItem.cloneNode(true);
// liste.append(nouvelItem);

/* Insertion d'Ã©lÃ©ments Ã  une position donnÃ©e */
// liste.insertAdjacentHTML('beforebegin', "<p>Ã‰lÃ©ment ajoutÃ© via <strong>beforebegin</strong> (ğŸ‡«ğŸ‡· avant le dÃ©but)</p>");
// liste.insertAdjacentHTML('afterbegin', "<li>Ã‰lÃ©ment ajoutÃ© via <strong>afterbegin</strong> (ğŸ‡«ğŸ‡· aprÃ¨s le dÃ©but)</li>");
// liste.insertAdjacentHTML('beforeend', "<li>Ã‰lÃ©ment ajoutÃ© via <strong>beforeend</strong> (ğŸ‡«ğŸ‡· avant la fin)</li>");
// liste.insertAdjacentHTML('afterend', "<p>Ã‰lÃ©ment ajoutÃ© via <strong>afterend</strong> (ğŸ‡«ğŸ‡· aprÃ¨s la fin)</p>");

// Depuis un Ã©lÃ©ment dÃ©jÃ  crÃ©Ã©
// const li = document.createElement('li');
// li.innerHTML = "Item crÃ©Ã© grÃ¢ce Ã  <strong>createElement()</strong>";
// liste.insertAdjacentElement('afterbegin', li);

// CrÃ©er et insÃ©rer un noeud texte
// liste.insertAdjacentText('afterbegin', 'Nouveau noeud texte');

/* TrÃ¨s vieille mÃ©thode */
// const nouvelItem = document.createElement('li');
// nouvelItem.innerHTML = "Item insÃ©rÃ© grÃ¢ce Ã  <strong>insertBefore()</strong>";
// const itemDeReference = liste.querySelector('li:nth-of-type(3)');
// liste.insertBefore(nouvelItem, itemDeReference);

/* Nouvelles mÃ©thodes */
// const avant = document.createElement('p');
// avant.innerHTML = "Ã‰lÃ©ment ajoutÃ© via <strong>before()</strong> (ğŸ‡«ğŸ‡· avant le dÃ©but)";
// liste.before(avant);

// const debut = document.createElement('li');
// debut.innerHTML = "Ã‰lÃ©ment ajoutÃ© via <strong>prepend()</strong> (ğŸ‡«ğŸ‡· aprÃ¨s le dÃ©but)";
// liste.prepend(debut);

// const fin = document.createElement('li');
// fin.innerHTML = "Ã‰lÃ©ment ajoutÃ© via <strong>append()</strong> (ğŸ‡«ğŸ‡· avant la fin)";
// liste.append(fin);

// const apres = document.createElement('p');
// apres.innerHTML = "Ã‰lÃ©ment ajoutÃ© via <strong>after()</strong> (ğŸ‡«ğŸ‡· aprÃ¨s la fin)";
// liste.after(apres);

/* Quelle mÃ©thode utiliser ? */